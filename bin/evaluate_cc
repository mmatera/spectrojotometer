#!/usr/bin/env python3

from __future__ import print_function

import argparse
import sys

from spectrojotometer.magnetic_model import MagneticModel
from spectrojotometer.model_io import (magnetic_model_from_file,
                                       read_spin_configurations_file)
from spectrojotometer.tools import eprint


def main():
    parser = argparse.ArgumentParser(
        description="From a set of energies and magnetic configurations, estimates the coupling constants of a model."
    )

    parser.add_argument(
        "modelfile",
        metavar="modelfile",
        type=str,
        help="load atomic positions from a model file.",
    )

    parser.add_argument(
        "input",
        metavar="[input file]",
        type=str,
        help="file containing evaluated energies and magnetic configurations.",
    )

    parser.add_argument(
        "-t",
        "--tolerance",
        metavar="[value]",
        type=float,
        default=0.001,
        help="Provides the estimated error for the energies.",
    )

    parser.add_argument(
        "-e", "--equations", action="store_true", help="Prints the resulting equations."
    )

    parser.add_argument(
        "-x",
        "--showchi",
        action="store_true",
        help="Prints the list of errors in the predicted configuration energy.",
    )

    args = vars(parser.parse_args())

    if args["modelfile"] is None:
        eprint(
            "A model file is required. You have to provide it by means of the parameter --modelfile"
        )
        return -1
    model = magnetic_model_from_file(args["modelfile"])
    if model.bond_lists is None or len(model.bond_lists) == 0:
        eprint("The model does not have defined bounds\n")
        eprint("Use bond_generator to define a non-trivial model\n")
        return -1

    energs, confs, comments = read_spin_configurations_file(args["input"], model)
    js, jerr, chis = model.compute_couplings(
        confs, energs, err_energs=args["tolerance"], printeqs=args["equations"]
    )

    offset_energy = js[-1]
    js.resize(js.size - 1)
    jmax = max(abs(js))
    print("\n\n# Results:\n===========\n\n")
    print("E_0 = ", offset_energy, " +/- ", args["tolerance"], "\n")
    print(model.bond_names)

    if min(jerr) < 0:
        eprint(
            "Warning: error bounds suggest that  the model is not compatible with the data. Try increasing the tolerance by means of the parameter --tolerance [tol]."
        )
        for i, val in enumerate(js):
            if jerr[i] < 0:
                print(
                    model.bond_names[i],
                    " = (",
                    val / jmax,
                    ") * ",
                    jmax,
                    "  (incompatible)",
                )
            else:
                print(
                    model.bond_names[i],
                    " = (",
                    val / jmax,
                    " +/-",
                    jerr[i] / jmax,
                    ") * ",
                    jmax,
                )
    else:
        for i, val in enumerate(js):
            print(
                model.bond_names[i],
                " = (",
                val / jmax,
                " +/-",
                jerr[i] / jmax,
                ") * ",
                jmax,
            )

    print("\n")
    if args["showchi"]:
        print(
            "\n# Error in Modeled Energy (relative to the tolerance): \n"
            + "=======================================================\n\n"
        )
        for c in chis:
            print(c)

    imax = 0
    chimax = 0
    for i, chi in enumerate(chis):
        if chi > chimax:
            chimax = chi
            imax = i
    print("\n", "max relative error:", chimax, " in configuration ", imax, "\n")
    return 0


if __name__ == "__main__":
    main()
