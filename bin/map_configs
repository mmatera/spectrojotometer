#!/usr/bin/env python3
from __future__ import print_function

import argparse

import numpy as np
from spectrojotometer.magnetic_model import MagneticModel
from spectrojotometer.model_io import (confindex, magnetic_model_from_file,
                                       read_spin_configurations_file)
from spectrojotometer.tools import eprint


def map_config_model1_model2(model1, config, model2, tol=0.1):
    if len(model1.coord_atomos) > len(model2.coord_atomos):
        eprint("# alert: unit cell in model2 is smaller than in model1.")
    if len(model1.coord_atomos) != len(config[0]):
        eprint(
            "# size of model1 (",
            len(model1.coord_atomos),
            ") is different that length of the configuration",
            len(config),
        )

    size1 = len(model1.coord_atomos)
    dictatoms = [-1 for p in model2.coord_atomos]
    for i, p in enumerate(model2.coord_atomos):
        for j, q in enumerate(model1.supercell):
            if np.linalg.norm(p - q) < tol:
                dictatoms[i] = j % size1
                break

    if type(config[0]) is list:
        ret = [[c[j] for j in dictatoms] for c in config]
        return ret
    else:
        ret = [config[j] for j in dictatoms]
        return ret


def main():
    parser = argparse.ArgumentParser(
        description="""
From an standard cif or wien2k struct file, produces a new cif file containing information about the bonds that defines a Heisenberg magnetic effective model.
If the input file has already information about bonds, the output file contains both the bonds in the input as well as the new generated bonds.
"""
    )

    parser.add_argument(
        "modelin",
        metavar="modelfile1",
        type=str,
        help="load atomic positions from a model file for the source model",
    )

    parser.add_argument(
        "modelout",
        metavar="modelfile2",
        type=str,
        help="load atomic positions from a model file for the target model",
    )

    parser.add_argument(
        "configin", metavar="conffile", type=str, help="configs in the src model"
    )

    parser.add_argument(
        "out",
        metavar="outfile",
        type=str,
        default=None,
        help="Name of the outputfile. If it is not provided, the output is printed to the standard output.",
    )

    args = vars(parser.parse_args())

    if args["modelin"] is None:
        eprint(
            "An input model file is required. You should provide it by means of the parameter --modelin"
        )
        return -1
    if args["modelout"] is None:
        eprint(
            "An output model file is required. You should provide it by means of the parameter --modelout"
        )
        return -1
    if args["configin"] is None:
        eprint(
            "A file with a list of configurations is required. You should provide it by means of the parameter --configin"
        )
        return -1
    if args["out"] is None:
        print(
            "An output file is required. You should provide it by means of the parameter --out"
        )
        return -1

    modelin = magnetic_model_from_file(args["modelin"])
    modelout = magnetic_model_from_file(args["modelout"])
    ens, confsin, comments = read_spin_configurations_file(args["configin"], modelin)
    comments = [comments[l] for l in comments]
    res = map_config_model1_model2(modelin, confsin, modelout, tol=0.1)

    if args["out"] == "-":
        print("# Configurations")
        for i, c in enumerate(res):
            print(c, "#", comments[i])
    else:
        with open(args["out"], "w") as fout:
            for i, c in enumerate(res):
                print(c)
                fout.write(str(c) + "# " + comments[i] + "\n")
    return 0


if __name__ == "__main__":
    main()
